{"version":3,"sources":["components/Card/Card.js","components/ExpenseFilter/ExpenseFilter.js","components/ExpenseDate/ExpenseDate.js","components/ExpenseItem/ExpenseItem.js","components/ExpensesList/ExpensesList.js","components/Chart/ChartBar/ChartBar.js","components/Chart/Chart.js","components/Expenses/ExpensesChart/Expenseschart.js","components/Expenses/Expenses.js","components/NewExpense/ExpenseForm/ExpenseForm.js","components/NewExpense/NewExpense.js","App.js","index.js"],"names":["Card","props","classes","className","children","ExpensesFilter","value","currentSelectedYear","onChange","event","onYearSelect","target","ExpenseDate","month","date","toLocaleString","day","year","getFullYear","ExpenseItem","title","amount","ExpensesList","items","length","map","expense","id","ChartBar","barFillHeight","maxValue","Math","round","style","height","label","Chart","dataPointsValues","dataPoints","dataPoint","totalMaximum","max","ExpensesChart","chartDataPoints","expenses","getMonth","Expenses","useState","filteredYear","setFilteredYear","filteredExpenses","filter","toString","selectedYear","ExpenseForm","enteredTitle","setEnteredTitle","enteredAmount","setEnteredAmount","enteredDate","setEnteredDate","onSubmit","preventDefault","expenseData","Date","onSaveExpenseData","type","min","step","onClick","onCancel","NewExpense","isEditing","setIsEditing","enteredExpenseData","random","onAddExpense","DUMMY_EXPENSES","App","setExpenses","prevExpenses","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.cb9f680e.chunk.js","sourcesContent":["import './Card.css'\r\n\r\nconst Card = (props) => {\r\n    // we cannot directly add classes to our custom components, we have to add it manually \r\n    const classes = 'card ' + props.className;\r\n    return <div className={classes}>{props.children}</div>;\r\n}\r\n//  children is reserved and every prop receives this by default\r\nexport default Card;\r\n","import './ExpenseFilter.css';\r\n\r\nconst ExpensesFilter = (props) => {\r\n    const yearSelectHandler = (event) => {\r\n        props.onYearSelect(event.target.value);\r\n    };\r\n\r\n    return (\r\n        <div className=\"expenses-filter\">\r\n            <div className=\"expenses-filter__control\">\r\n                <label>Filter by year</label>\r\n                <select value={props.currentSelectedYear} onChange={yearSelectHandler}>\r\n                    <option value=\"2022\">2022</option>\r\n                    <option value=\"2021\">2021</option>\r\n                    <option value=\"2020\">2020</option>\r\n                    <option value=\"2019\">2019</option>\r\n                </select>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ExpensesFilter;\r\n","import './ExpenseDate.css';\r\n\r\nconst ExpenseDate = (props) => {\r\n    const month = props.date.toLocaleString('en-US', { month: 'long' });\r\n    const day = props.date.toLocaleString('en-US', { day: '2-digit' });\r\n    const year = props.date.getFullYear();\r\n\r\n    return (\r\n        <div className=\"expense-date\">\r\n            <div className=\"expense-date__month\">{month}</div>\r\n            <div className=\"expense-date__year\">{year}</div>\r\n            <div className=\"expense-date__day\">{day}</div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ExpenseDate;\r\n","import Card from '../Card/Card';\r\nimport ExpenseDate from '../ExpenseDate/ExpenseDate';\r\nimport './ExpenseItem.css';\r\n// import { useState } from 'react';\r\n\r\nconst ExpenseItem = (props) => {\r\n    // const [title, setTitle] = useState(props.title); // needs a default state value, returns a special variable and a function that we can call to assign a new value to that variable, if we have data and that data might be changed and also the change is also reflected on the UI, then we have to use useState Hook \r\n\r\n    // const changeExpenseItemTitleHandler = () => {\r\n    //     setTitle('Updated');\r\n    // };\r\n\r\n    return (\r\n        <li>\r\n            <Card className=\"expense-item\">\r\n                <ExpenseDate date={props.date} />\r\n                <div className=\"expense-item__description\">\r\n                    <h2>{props.title}</h2>\r\n                    <div className=\"expense-item__price\">{props.amount}</div>\r\n                </div>\r\n                {/* <button onClick={changeExpenseItemTitleHandler}>\r\n                Change Title\r\n            </button> */}\r\n            </Card>\r\n        </li>\r\n    );\r\n};\r\n\r\nexport default ExpenseItem;\r\n","import ExpenseItem from '../ExpenseItem/ExpenseItem';\r\nimport './ExpensesList.css';\r\n\r\nconst ExpensesList = (props) => {\r\n\r\n    if (props.items.length === 0) {\r\n        return <h2 className=\"expenses-list__fallback\">No expenses found!</h2>\r\n    }\r\n\r\n    // props.items.length > 0\r\n    //     ? (expensesContent = props.items.map((expense) => {\r\n    //           return (\r\n    //               <ExpenseItem\r\n    //                   key={expense.id}\r\n    //                   title={expense.title}\r\n    //                   amount={expense.amount}\r\n    //                   date={expense.date}\r\n    //               />\r\n    //           );\r\n    //       }))\r\n    //     : (expensesContent = <p>No Expenses Found!</p>);\r\n\r\n    return (\r\n        <ul className=\"expenses list\">\r\n            {props.items.map((expense) => {\r\n                return (\r\n                    <ExpenseItem\r\n                      key={expense.id}\r\n                      title={expense.title}\r\n                      amount={expense.amount}\r\n                      date={expense.date}\r\n                  />\r\n                )\r\n            })}\r\n        </ul>\r\n    )\r\n};\r\n\r\nexport default ExpensesList;","import './ChartBar.css';\r\n\r\nconst ChartBar = (props) => {\r\n    let barFillHeight = '0%';\r\n\r\n    if (props.maxValue > 0) {\r\n        barFillHeight = Math.round((props.value / props.maxValue) * 100) + '%';\r\n    }\r\n\r\n    return (\r\n        <div className=\"chart-bar\">\r\n            <div className=\"chart-bar__inner\">\r\n                <div\r\n                    className=\"chart-bar__fill\"\r\n                    style={{ height: barFillHeight }}\r\n                ></div>\r\n            </div>\r\n            <div className=\"chart-bar__label\">{props.label}</div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ChartBar;\r\n","import './Chart.css';\r\nimport ChartBar from './ChartBar/ChartBar';\r\n\r\nconst Chart = (props) => {\r\n    const dataPointsValues = props.dataPoints.map(\r\n        (dataPoint) => dataPoint.value\r\n    );\r\n    const totalMaximum = Math.max(...dataPointsValues);\r\n\r\n    return (\r\n        <div className=\"chart\">\r\n            {props.dataPoints.map((dataPoint) => {\r\n                return (\r\n                    <ChartBar\r\n                        key={dataPoint.label}\r\n                        value={dataPoint.value}\r\n                        maxValue={totalMaximum}\r\n                        label={dataPoint.label}\r\n                    />\r\n                );\r\n            })}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Chart;\r\n","import Chart from '../../Chart/Chart';\r\n\r\nconst ExpensesChart = (props) => {\r\n    const chartDataPoints = [\r\n        {\r\n            label: 'Jan',\r\n            value: 0,\r\n        },\r\n        {\r\n            label: 'Feb',\r\n            value: 0,\r\n        },\r\n        {\r\n            label: 'Mar',\r\n            value: 0,\r\n        },\r\n        {\r\n            label: 'Apr',\r\n            value: 0,\r\n        },\r\n        {\r\n            label: 'May',\r\n            value: 0,\r\n        },\r\n        {\r\n            label: 'Jun',\r\n            value: 0,\r\n        },\r\n        {\r\n            label: 'Jul',\r\n            value: 0,\r\n        },\r\n        {\r\n            label: 'Aug',\r\n            value: 0,\r\n        },\r\n        {\r\n            label: 'Sep',\r\n            value: 0,\r\n        },\r\n        {\r\n            label: 'Oct',\r\n            value: 0,\r\n        },\r\n        {\r\n            label: 'Nov',\r\n            value: 0,\r\n        },\r\n        {\r\n            label: 'Dec',\r\n            value: 0,\r\n        },\r\n    ];\r\n\r\n    for (const expense of props.expenses) {\r\n        const expenseMonth = expense.date.getMonth(); // starting at 0 -> jan\r\n        chartDataPoints[expenseMonth].value += expense.amount;\r\n    }\r\n\r\n    return <Chart dataPoints={chartDataPoints} />;\r\n};\r\n\r\nexport default ExpensesChart;\r\n","import Card from '../Card/Card';\r\nimport ExpensesFilter from '../ExpenseFilter/ExpenseFilter';\r\nimport './Expenses.css';\r\nimport { useState } from 'react';\r\nimport ExpensesList from '../ExpensesList/ExpensesList';\r\nimport ExpensesChart from './ExpensesChart/Expenseschart';\r\n\r\nconst Expenses = (props) => {\r\n    const [filteredYear, setFilteredYear] = useState('2020');\r\n\r\n    const yearSelect = (selectedYear) => {\r\n        setFilteredYear(selectedYear);\r\n    };\r\n\r\n    const filteredExpenses = props.items.filter((expense) => {\r\n        return expense.date.getFullYear().toString() === filteredYear;\r\n    });\r\n\r\n    // let expensesContent;\r\n\r\n    // filteredExpenses.length > 0\r\n    //     ? (expensesContent = filteredExpenses.map((expense) => {\r\n    //           return (\r\n    //               <ExpenseItem\r\n    //                   key={expense.id}\r\n    //                   title={expense.title}\r\n    //                   amount={expense.amount}\r\n    //                   date={expense.date}\r\n    //               />\r\n    //           );\r\n    //       }))\r\n    //     : (expensesContent = <p>No Expenses Found!</p>);\r\n\r\n    return (\r\n        <div>\r\n            <Card className=\"expenses\">\r\n                <ExpensesFilter\r\n                    currentSelectedYear={filteredYear}\r\n                    onYearSelect={yearSelect}\r\n                />\r\n                <ExpensesChart expenses={filteredExpenses} />\r\n                <ExpensesList items={filteredExpenses} />\r\n                {/* {expensesContent} */}\r\n                {/* {filteredExpenses.length === 0 && <p>No Expenses Found!</p>}\r\n                {filteredExpenses.length > 0 &&\r\n                    filteredExpenses.map((expense) => {\r\n                        return (\r\n                            <ExpenseItem\r\n                                key={expense.id}\r\n                                title={expense.title}\r\n                                amount={expense.amount}\r\n                                date={expense.date}\r\n                            />\r\n                        );\r\n                    })} */}\r\n            </Card>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Expenses;\r\n","import './ExpenseForm.css';\r\nimport { useState } from 'react';\r\n\r\nconst ExpenseForm = (props) => {\r\n    // inputs value is always a string first\r\n    const [enteredTitle, setEnteredTitle] = useState('');\r\n    const [enteredAmount, setEnteredAmount] = useState('');\r\n    const [enteredDate, setEnteredDate] = useState('');\r\n\r\n    // using one state\r\n    // const [userInput, setUserInput] = useState({\r\n    //     enteredTitle: '',\r\n    //     enteredAmount: '',\r\n    //     enteredDate: '',\r\n    // });\r\n\r\n    const titleChangeHandler = (event) => {\r\n        setEnteredTitle(event.target.value);\r\n        // updating state depends on the previous state, this method of updating state is not good\r\n        // setUserInput({\r\n        //     ...userInput,\r\n        //     enteredTitle: event.target.value,\r\n        // });\r\n\r\n        // another method of updating the state\r\n        // react schedules state updates, it does not performs them instantly, and therefore if we update many states at the same time, we may get some outdated states in the upper method, in this approach, react guarantees that here prevState is the latest state snapshot\r\n        // setUserInput((prevState) => {\r\n        //     return {\r\n        //         ...prevState,\r\n        //         enteredTitle: event.target.value,\r\n        //     };\r\n        // });\r\n    };\r\n\r\n    const amountChangeHandler = (event) => {\r\n        setEnteredAmount(event.target.value);\r\n        // setUserInput({\r\n        //     ...userInput,\r\n        //     enteredAmount: event.target.value,\r\n        // });\r\n    };\r\n\r\n    const dateChangeHandler = (event) => {\r\n        setEnteredDate(event.target.value);\r\n        // setUserInput({\r\n        //     ...userInput,\r\n        //     enteredDate: event.target.value,\r\n        // });\r\n    };\r\n\r\n    const formSubmitHandler = (event) => {\r\n        event.preventDefault();\r\n        const expenseData = {\r\n            title: enteredTitle,\r\n            amount: +enteredAmount,\r\n            date: new Date(enteredDate),\r\n        };\r\n        props.onSaveExpenseData(expenseData);\r\n        setEnteredTitle('');\r\n        setEnteredAmount('');\r\n        setEnteredDate('');\r\n    };\r\n\r\n    return (\r\n        <form onSubmit={formSubmitHandler}>\r\n            <div className=\"new-expense__controls\">\r\n                <div className=\"new-expense__control\">\r\n                    <label>Title</label>\r\n                    <input\r\n                        type=\"text\"\r\n                        value={enteredTitle}\r\n                        onChange={titleChangeHandler}\r\n                    />\r\n                </div>\r\n                <div className=\"new-expense__control\">\r\n                    <label>Amount</label>\r\n                    <input\r\n                        onChange={amountChangeHandler}\r\n                        type=\"number\"\r\n                        min=\"0.01\"\r\n                        step=\"0.01\"\r\n                        value={enteredAmount}\r\n                    />\r\n                </div>\r\n                <div className=\"new-expense__control\">\r\n                    <label>Date</label>\r\n                    <input\r\n                        onChange={dateChangeHandler}\r\n                        type=\"date\"\r\n                        min=\"2019-01-01\"\r\n                        max=\"2022-12-31\"\r\n                        value={enteredDate}\r\n                    />\r\n                </div>\r\n                <div className=\"new-expense__actions\">\r\n                    <button type=\"button\" onClick={props.onCancel}>Cancel</button>\r\n                    <button type=\"submit\">Add Expense</button>\r\n                </div>\r\n            </div>\r\n        </form>\r\n    );\r\n};\r\n\r\nexport default ExpenseForm;\r\n","import ExpenseForm from './ExpenseForm/ExpenseForm';\r\nimport './NewExpense.css';\r\nimport { useState } from 'react';\r\n\r\nconst NewExpense = (props) => {\r\n    const [isEditing, setIsEditing] = useState(false);\r\n\r\n    const saveExpenseDataHandler = (enteredExpenseData) => {\r\n        const expenseData = {\r\n            ...enteredExpenseData,\r\n            id: Math.random().toString(),\r\n        };\r\n        props.onAddExpense(expenseData);\r\n        setIsEditing(false);\r\n    };\r\n\r\n    const startEditingHandler = () => setIsEditing(true);\r\n\r\n    const stopEditing = () => setIsEditing(false);\r\n\r\n    return (\r\n        <div className=\"new-expense\">\r\n            {!isEditing && (\r\n                <button onClick={startEditingHandler}>Add New Expense</button>\r\n            )}\r\n            {isEditing && (\r\n                <ExpenseForm\r\n                    onCancel={stopEditing}\r\n                    onSaveExpenseData={saveExpenseDataHandler}\r\n                />\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default NewExpense;\r\n","import Expenses from './components/Expenses/Expenses';\r\nimport NewExpense from './components/NewExpense/NewExpense';\r\nimport { useState } from 'react';\r\n\r\nconst DUMMY_EXPENSES = [\r\n    {\r\n        id: 'e1',\r\n        title: 'Car insurance1',\r\n        amount: 100,\r\n        date: new Date(2021, 10, 11),\r\n    },\r\n    {\r\n        id: 'e2',\r\n        title: 'books',\r\n        amount: 200,\r\n        date: new Date(2020, 10, 11),\r\n    },\r\n    {\r\n        id: 'e3',\r\n        title: 'television',\r\n        amount: 1000,\r\n        date: new Date(2022, 10, 11),\r\n    },\r\n    {\r\n        id: 'e4',\r\n        title: 'wifi',\r\n        amount: 120,\r\n        date: new Date(2021, 10, 11),\r\n    },\r\n];\r\n\r\nconst App = () => {\r\n    const [expenses, setExpenses] = useState(DUMMY_EXPENSES);\r\n\r\n    const addExpenseDataHandler = (expense) => {\r\n        // if state update depends on previous state, use function syntax\r\n        setExpenses((prevExpenses) => [expense, ...expenses]);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <NewExpense onAddExpense={addExpenseDataHandler} />\r\n            <Expenses items={expenses} />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default App;\r\n","import ReactDOM from 'react-dom';\r\n\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}